"                       __   _(_)_ __ ___  _ __ ___
"                       \ \ / / | '_ ` _ \| '__/ __|
"                        \ V /| | | | | | | | | (__
"                         \_/ |_|_| |_| |_|_|  \___|
"
" Author: Serg Tatarnikov <sergeytat@gmail.com>
" Source: http://github.com/sergtat/vim
"
" NEOBUNDLE {{{ ===============================================================
" Set compatibilites plugins {{{
language ru_RU.UTF-8    " Solve some plugins incompatibilities
set t_Co=256		" Use 256 colors in vim - some plugins not work without it

if has('vim_starting')
    set nocompatible    " Be iMproved
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
filetype off			" Turn off filetype plugins before bundles init
" }}}
" Auto installing NeoBundle {{{
let isNpmInstalled = executable("npm")
let iCanHazNeoBundle=1
let neobundle_readme=expand($HOME.'/.vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
    if !isNpmInstalled
        echo "==============================================="
        echo "Your need to install npm to enable all features"
        echo "==============================================="
    endif
    echo "Installing NeoBundle.."
    echo ""
    silent !mkdir -p $HOME/.vim/bundle
    silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
    let iCanHazNeoBundle=0
endif
" }}}
" Call NeoBundle begin {{{
call neobundle#begin(expand('~/.vim/bundle/'))
" }}}
" BUNDLES {{{
" Shougo/neobundle.vim {{{
" Is better if NeoBundle rules NeoBundle (needed!)
NeoBundle 'Shougo/neobundle.vim'
" }}}
" Shougo/vimproc {{{
" Vimproc to asynchronously run commands (NeoBundle, Unite)
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
" }}}
" Shougo/unite.vim {{{
" Unite. The interface to rule almost everything
NeoBundle 'Shougo/unite.vim'
" }}}
" Shougo/neocomplete.vim {{{
NeoBundle 'Shougo/neocomplete.vim'
" }}}
" Shougo/neosnippet.vim {{{
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'honza/vim-snippets'
" }}}
" Colorschemes {{{
" NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'morhetz/gruvbox'
" NeoBundle 'flazz/vim-colorschemes'
" NeoBundle 'xolox/vim-misc'
" NeoBundle 'xolox/vim-colorscheme-switcher'
" NeoBundle 'vim-scripts/Txtfmt-The-Vim-Highlighter'
" }}}
" bling/vim-airline {{{
NeoBundle 'bling/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
" }}}
" lyokha/vim-xkbswitch {{{
NeoBundle 'lyokha/vim-xkbswitch'
" }}}
" mhinz/vim-startify {{{
NeoBundle 'mhinz/vim-startify'
" }}}
" jiangmiao/auto-pairs {{{
NeoBundle 'jiangmiao/auto-pairs'
" }}}
" tpope/vim-repeat {{{
NeoBundle 'tpope/vim-repeat'
" }}}
" tpope/vim-surround {{{
NeoBundle 'tpope/vim-surround'
" }}}
" tpope/vim-rsi {{{
NeoBundle 'tpope/vim-rsi'
" }}}
" investigate.vim {{{
NeoBundle 'Keithbsmiley/investigate.vim'
" }}}
" vim-visual-increment {{{
NeoBundle 'triglav/vim-visual-increment'
" }}}
" tpope/vim-commentary {{{
NeoBundle 'tpope/vim-commentary'
" NeoBundle 'tomtom/tcomment_vim'
" NeoBundle 'scrooloose/nerdcommenter'
" }}}
" AndrewRadev/switch.vim {{{
" Switch yes/no
NeoBundle 'AndrewRadev/switch.vim'
" }}}
" sergtat/vim-numbered {{{
NeoBundle 'sergtat/vim-numbered'
" }}}
" sergtat/increment.vim {{{
NeoBundle 'sergtat/increment.vim'
" }}}
" godlygeek/tabular {{{
NeoBundle 'godlygeek/tabular' 
" }}}
" dhruvasagar/vim-table-mode {{{
NeoBundle 'dhruvasagar/vim-table-mode'
" }}}
" Syntax {{{
" Markdown {{{
" NeoBundleLazy 'plasticboy/vim-markdown', { 'autoload' : { 'filetypes' : ['markdown'] } }
" NeoBundleLazy 'tpope/vim-markdown', { 'autoload' : { 'filetypes' : ['markdown'] } }
NeoBundleLazy 'gabrielelana/vim-markdown', { 'autoload' : { 'filetypes' : ['markdown'] } }
NeoBundleLazy 'sergtat/vim-markdown-stuff', { 'autoload' : { 'filetypes' : ['markdown'] } }
" NeoBundleLazy 'jtratner/vim-flavored-markdown', { 'autoload' : { 'filetypes' : ['markdown'] } }
" NeoBundleLazy 'vim-pandoc/vim-pandoc-syntax', { 'autoload' : { 'filetypes' : ['markdown'] } }
" NeoBundleLazy 'mikewest/vim-markdown', { 'autoload' : { 'filetypes' : ['markdown'] } }
" }}}
" Coffee {{{
NeoBundleLazy 'kchmck/vim-coffee-script', { 'autoload' : { 'filetypes' : ['coffee'] } }
" }}}
" }}}
" END BUNDLES }}}
" Call NeoBundle end {{{
call neobundle#end()
" }}}
" Indent and plugins by filetype {{{
if has('autocmd')
  filetype plugin indent on
endif
" }}}
" Enable syntax highlighting {{{
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif
" }}}
" Auto install and Delete the Plugins {{{
" First-time plugins installation
if iCanHazNeoBundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    set nomore
    NeoBundleInstall
endif
" Check if all of the plugins are already installed, in other case ask if we
" want to install them (useful to add plugins in the .vimrc)
NeoBundleCheck
NeoBundleClearCache
" }}}
" END NEOBUNDLE }}}
" PLUGINS Setup {{{ ===========================================================
" neocomplete {{{
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_refresh_always = 1
let g:neocomplete#max_list = 50
let g:neocomplete#min_keyword_length = 1
let g:neocomplete#sources#syntax#min_keyword_length = 1
let g:neocomplete#data_directory = $HOME.'/.vim/tmp/neocomplete'
let g:neocomplete#enable_auto_select = 0

" toggle the auto select feature
function! ToggleNeoComplete()
  if !g:neocomplete#disable_auto_complete && g:neocomplete#enable_auto_select
      let g:neocomplete#disable_auto_complete = 0
      let g:neocomplete#enable_auto_select = 0
  elseif !g:neocomplete#disable_auto_complete && !g:neocomplete#enable_auto_select
      let g:neocomplete#disable_auto_complete = 1
      let g:neocomplete#enable_auto_select = 0
  elseif g:neocomplete#disable_auto_complete && !g:neocomplete#enable_auto_select
      let g:neocomplete#disable_auto_complete = 0
      let g:neocomplete#enable_auto_select = 1
  endif
endfunction
nnoremap <silent><Leader>nc :call ToggleNeoComplete()<CR>

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.python='[^. \t]\.\w*'
" }}}
" neosnippet {{{
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB>
\ pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" }}}
" vim-airline {{{
"let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='powerlineish'
"let g:airline_theme='molokai'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'
" }}}
" vim-xkbswitch {{{
let g:XkbSwitchEnabled = 1
let g:XkbSwitchLib = '/usr/local/lib/libxkbswitch.so'
let g:XkbSwitchNLayout = 'us'
" }}}
" mhinz/vim-startify {{{
let g:startify_list_order = [
	\ ['   My most recently used files'],
	\ 'files',
	\ ['   My most recently used files in the current directory:'],
	\ 'dir',
	\ ['   These are my sessions:'],
	\ 'sessions',
	\ ['   These are my bookmarks:'],
	\ 'bookmarks',
	\ ]
let g:startify_bookmarks = [ {'v': '~/.vim/vimrc'}, {'z': '~/.zshrc'}, {'w': '~/repo/wiki/pages/'}]
" }}}
" auto-pairs {{{
let g:AutoPairsFlyMode = 1
" }}}
" investigate.vim {{{
nnoremap <F1> :call investigate#Investigate()<CR>
" }}}
" tpope/vim-commentary {{{
set commentstring=#%s
" }}}
" switch yes/no {{{
let g:switch_mapping = "-"
" }}}
" Syntax {{{
" MarkDown {{{
" let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'javascript=js']
let g:markdown_include_jekyll_support = 0
let g:markdown_enable_insert_mode_leader_mappings = 1
" }}}
" Coffee {{{
au! BufRead,BufNewFile *.coffee set filetype=coffee
" }}}
" JSON {{{
au! BufRead,BufNewFile *.json set filetype=json
" }}}
" }}}
" END PLUGINS Setup }}}
" VIM Setup {{{ ===============================================================
" Disable Uganda children {{{
set shortmess+=I
" }}}
" Colorscheme {{{
set background=dark            " set a dark background
if &term == "linux"
    " colorscheme solarized
    colorscheme peachpuff
else
    colorscheme gruvbox
endif
highlight Comment cterm=Italic term=italic gui=italic
highlight htmlItalic cterm=Italic term=italic gui=italic
highlight htmlBoldItalic cterm=BoldItalic term=BoldItalic gui=BoldItalic
highlight markdownItalic cterm=Italic term=italic gui=italic
highlight markdownBoldItalic cterm=BoldItalic term=BoldItalic gui=BoldItalic
" Toggle Background Function
function! ToggleBackground()
if (&background=='dark')
    set background=light
else
    set background=dark
endif
endfunction
command! Togbg call ToggleBackground()
nnoremap <Leader>bg :Togbg<CR>
vnoremap <Esc><Leader>bg :Togbg<CR>
" }}}
" Language & keymap {{{
if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
set helpheight=100
set helplang=ru,en
language messages C
" }}}
" <Leader> & <LocalLeader> mapping {{{
let mapleader=','
" }}}
" Basic options {{{
" Use :help 'option' to see the documentation for the given option.
set backspace=indent,eol,start
set complete-=i
set nrformats-=octal
set ttimeout
set ttimeoutlen=100
set incsearch

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

set linebreak
set showbreak='\'
set wrap
set textwidth=0

set laststatus=2
set ruler
set showcmd
set wildmenu
set cursorline                  " highlight the line under the cursor
set fillchars+=vert:│           " better looking for windows separator
set ttyfast                     " better screen redraw
set title                       " set the terminal title to the current file

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

if &shell =~# 'fish$'
  set shell=/bin/bash
endif

if &shell =~# 'zsh$'
  set shell=/bin/bash
endif

set autoread
set fileformats+=mac

if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif
if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
  set t_Co=256
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>
" }}}
" Indent {{{
set autoindent
set smarttab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set expandtab
" }}}
" set filetypes {{{
" set formatoptions {{{
if has("autocmd")
  filetype on
  autocmd FileType json set autoindent
  autocmd FileType json set formatoptions=tcq2l
  autocmd FileType json set textwidth=78 shiftwidth=2
  autocmd FileType json set softtabstop=2 tabstop=2
  autocmd FileType json set expandtab
  autocmd FileType json set conceallevel=0
  autocmd FileType json set foldmethod=syntax nofoldenable
  autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
  autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
  autocmd FileType php setlocal ts=4 sts=4 sw=4 noet
  autocmd FileType python setlocal ts=4 sts=4 sw=4 et
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 et
  autocmd FileType html setlocal ts=2 sts=2 sw=2 et wrap
  autocmd FileType xhtml setlocal ts=2 sts=2 sw=2 noet wrap
  autocmd FileType xml setlocal ts=2 sts=2 sw=2 noet wrap
  autocmd FileType css setlocal ts=2 sts=2 sw=2 et
  autocmd FileType vim setlocal ts=2 sts=2 sw=2 et
  autocmd FileType apache setlocal ts=2 sts=2 sw=2 noet
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 et
  autocmd FileType markdown setlocal ts=2 sts=2 sw=2 et wrap
endif
" }}}
" MARKDOWN {{{
" syn region markdownBoldItalic matchgroup=markdownInlineDelimiter
"   \ start="\%(\s\|_\|^\)\@<=_\*\*\%(\s\|\*\|$\)\@!" end="\%(\s\|\*\)\@<!\*\*_"
"   \ contains=@markdownInline
" syn region markdownBoldItalic matchgroup=markdownInlineDelimiter
"   \ start="\%(\s\|\*\|^\)\@<=\*__\%(\s\|_\|$\)\@!" end="\%(\s\|_\)\@<!__\*"
"   \ contains=@markdownInline

autocmd BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown
autocmd FileType markdown :let maplocalleader='\'
autocmd FileType markdown :set list | :set nospell
autocmd FileType markdown :let g:table_mode_corner="|"
autocmd FileType markdown :nmap <localLeader>1 :s@^@# @ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>2 :s@^@## @ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>3 :s@^@### @ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>4 :s@^@#### @ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>5 :s@^@##### @ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>6 :s@^@###### @ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>i :s@\(.*\)@_\1_@ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :vmap <localLeader>i :s@\%V\(.*\)\%V@_\1_@ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>b :s@\(.*\)@**\1**@ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :vmap <localLeader>b :s@\%V\(.*\)\%V@**\1**@ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>` :s@\(.*\)@```bash\r\1\r```@ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :vmap <localLeader>` :s@\%V\(.*\)\%V@```bash\r\1\r```@ <Enter> :nohlsearch <Enter>
autocmd FileType markdown :nmap <localLeader>- :s/^\s*/- / <CR> :nohlsearch <CR>
autocmd FileType markdown :vmap <localLeader>- :s/^\s*/- / <CR> :nohlsearch <CR>
autocmd FileType markdown :nmap <localLeader>> :s/^\s*/> / <CR> :nohlsearch <CR>
autocmd FileType markdown :vmap <localLeader>> :s/^\s*/> / <CR> :nohlsearch <CR>
autocmd FileType markdown :vmap <localLeader>n :s@^@1. @<CR> gv :Numbered<CR> :nohlsearch<CR>
autocmd FileType markdown :nmap <localLeader>ti ^i![]( ~/repo/sites/wiki/images/Kulinar '')<ESC>
autocmd FileType markdown :map  <localLeader>di :s@(.*/images@(/images@<CR> :nohlsearch<CR>

" }}}
" }}}
" Line number {{{
set number
set numberwidth=4
autocmd InsertEnter * set norelativenumber
autocmd InsertLeave * set relativenumber
" }}}
" AutoPaste mode {{{
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
function! XTermPasteBegin()
set pastetoggle=<Esc>[201~
set paste
return ""
endfunction
" }}}
" Show hidden chars {{{
nmap <Leader>eh :set list!<CR>
set listchars=tab:→\ ,eol:↵,trail:·,extends:↷,precedes:↶
" }}}
" Maps {{{
set confirm
map  <F2> :w<CR>
map! <F2> <Esc>:w<CR>
map  <F3> :q<CR>
map! <F3> <Esc>:q<CR>
vmap < <gv
vmap > >gv
nmap <Enter> i<CR><Esc>
nmap <Space> i<Space><Esc>
" Tabs {{{
map <C-t> :tabnew<CR>
if &term == "linux"
nnoremap L gt
nnoremap H gT
else
nnoremap Oc gt
nnoremap Od gT
endif
" }}}
" }}}
" Edit & autoload configuration when this file changes ($MYIMRC) {{{
map <Leader>vr :tabnew $MYVIMRC<CR>
map! <Esc><Leader>vr :tabnew $MYVIMRC<CR>
augroup reload_vimrc
autocmd!
autocmd! BufWritePost $MYVIMRC nested source $MYVIMRC | AirlineRefresh
autocmd! BufWritePost *.vim nested source $MYVIMRC | AirlineRefresh
augroup END
" }}}
" My Function {{{
let g:bufcleaner_max_save = 2

command! -bar -nargs=? CleanBuffers call s:cleanBuffers(<f-args>)
function! s:cleanBuffers(...) abort
let force = a:0 >= 1 && a:1 ==# '-f' ? 1 : 0
redir => bufs
silent! buffers
redir END

let hidden = []
for buf in map(split(bufs, '\n'), 'split(v:val)')
let bufnr = buf[0] + 0
let flags = matchstr(join(buf[1:]), '^.*\ze\s\+"')
let mod = substitute(flags, '\s*', '', 'g')
let hide = mod ==# 'h' || mod ==# 'h+'
	\ && (force || input(printf("\n%s not saved.\nDelete anyway? [Y]es, (N)o: ",
		\ bufname(bufnr))) =~? '^y\%[es]$')
if hide
	call add(hidden, bufnr)
endif
endfor

let saved = get(g:, 'bufcleaner_max_save', 2) 
let target = len(hidden) > saved ? join(hidden[0:-saved-1], ' ') : ''
if !empty(target)
silent! execute 'bwipeout!' target
endif
endfunction

augroup buffer-cleaner
autocmd!
autocmd BufHidden * CleanBuffers
augroup END
" }}}
" END VIM SETUP }}}
" TODO {{{
" Number List
" :let i=1 | '<,'>g/^/ s//\=i . ". "/ | let i+=1 | nohlsearch
"		or
" Select your lines in visual mode with: V, then type:
" :'<,'>s/^\s*\zs/\=(line('.') - line("'<")+1).'. '
" Which is easy to put in a command:
" command! -nargs=0 -range=% Number <line1>,<line2>s/^\s*\zs/\=(line('.') - <line1>+1).'. '
" }}}
" vim:foldmethod=marker
